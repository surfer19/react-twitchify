{"version":3,"sources":["redux/StreamListActions.js","redux/StreamListReducer.js","redux/reducers.js","redux/configureStore.js","components/TwitchNav/index.js","components/StreamItem/index.js","components/StreamList/selectors.js","components/StreamList/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["FETCH_STREAMS_BEGIN","FETCH_STREAMS_SUCCESS","FETCH_STREAMS_FAILURE","FETCH_FILTERED_STREAMS_SUCCESS","defaultState","allStreams","filteredStreams","streamListReducer","state","action","type","payload","rootReducer","combineReducers","configureStore","initialState","createStore","compose","applyMiddleware","thunk","logger","cacheEnhancer","log","window","__REDUX_DEVTOOLS_EXTENSION__","TwitchNav","props","toggle","bind","isOpen","this","setState","Navbar","dark","expand","className","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","target","React","Component","TwitchItem","stream","channel","url","rel","Card","src","logo","width","alt","viewers","CardImg","top","preview","medium","CardBody","CardTitle","Truncate","lines","ellipsis","status","CardSubtitle","name","game","CardText","selectProfessionsFromItems","createSelector","items","map","item","professions","twoDimensionProfessions","result","Map","profession","has","set","push","profName","filter","includes","StreamList","loadMore","streamsToLoad","loadedStreams","canLoad","loadMoreStreams","fetchAllStreams","then","console","nextStreamsToLoad","concat","length","pageStart","hasMore","threshold","loader","key","Spinner","color","i","style","position","height","transform","left","connect","dispatch","offset","getState","a","axios","get","headers","params","limit","response","data","streams","err","error","store","App","basename","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adc514b4.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/*\n * CONSTANTS\n */\n\n// fetch streams\nexport const FETCH_STREAMS_BEGIN = \"FETCH_STREAMS_BEGIN\";\nexport const FETCH_STREAMS_SUCCESS = \"FETCH_STREAMS_SUCCESS\";\nexport const FETCH_STREAMS_FAILURE = \"FETCH_STREAMS_FAILURE\"; \n\n// filtered\nexport const FETCH_FILTERED_STREAMS_SUCCESS = \"FETCH_FILTERED_STREAMS_SUCCESS\";\n\n/*\n * FUNCTIONS\n */\n\n// fetch streams\nexport const fetchAllStreams = (offset) => {    \n    return async (dispatch, getState) => {\n        try {            \n            dispatch(fetchAllStreamsBegin())            \n            // for testing purpose\n            // setTimeout(async() => {\n            // call api\n            const response = (await axios.get(\"https://api.twitch.tv/kraken/streams/\", {\n                headers: {\n                    'Client-ID': 'e58bb9u3nmtqp4ikxaz1qg05kelpy7l',\n                    'Accept': 'application/vnd.twitchtv.v5+json?api_version=5'\n                },\n                params: {\n                    limit: 20,\n                    offset: offset\n                }\n            }\n            )).data;\n            // TODO: parse response with object destruction?            \n            // const response = mockData;\n            // success\n            dispatch(fetchAllStreamsSuccess(response))\n            // }, 1000)\n        } catch (err) {\n            dispatch(fetchAllStreamsFailure(err))\n        }\n    }\n}\n\nfunction fetchAllStreamsBegin() {\n    return  {\n        type: FETCH_STREAMS_BEGIN\n    }\n}\n\nfunction fetchAllStreamsSuccess(responseData) {\n    return {\n        type: FETCH_STREAMS_SUCCESS,\n        payload: responseData.streams\n    }\n}\n\nfunction fetchAllStreamsFailure(err) {\n    return {\n        type: FETCH_STREAMS_FAILURE,\n        error: err\n    }\n}\n\nexport const fetchfilteredStreams = (streams) => {\n    return async dispatch => {\n        dispatch(fetchfilteredStreamsSuccess(streams))\n    }\n}\n\nfunction fetchfilteredStreamsSuccess(streams) {\n    return {\n        type: FETCH_FILTERED_STREAMS_SUCCESS,\n        payload: streams\n    }\n}","import { \n    FETCH_STREAMS_BEGIN, \n    FETCH_STREAMS_SUCCESS, \n    FETCH_STREAMS_FAILURE ,\n    FETCH_FILTERED_STREAMS_SUCCESS\n} from \"./StreamListActions\";\n\nconst defaultState = {\n    allStreams: [],\n    filteredStreams: []\n}\n\nconst streamListReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case FETCH_STREAMS_BEGIN:\n            return {\n                ...state\n            }\n        case FETCH_STREAMS_SUCCESS:\n            return {\n                ...state,\n                allStreams: action.payload\n            }\n        case FETCH_STREAMS_FAILURE:\n            return {\n                ...state\n            }\n        case FETCH_FILTERED_STREAMS_SUCCESS: \n            return {\n                ...state,\n                filteredStreams: action.payload\n            }\n        default: \n            return state\n    }\n}\n\nexport default streamListReducer;","import { combineReducers } from 'redux';\n\nimport streamListReducer from \"./StreamListReducer\";\n\nconst rootReducer = combineReducers({\n\tstreamListReducer\n});\n\nexport default rootReducer;","import { createStore, compose, applyMiddleware } from 'redux'\nimport { cacheEnhancer } from 'redux-cache'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\nimport logger from 'redux-logger'\n\n\nconst configureStore = (initialState = {}) => \n    createStore(\n        rootReducer,\n        initialState,\n        compose(\n            applyMiddleware(thunk, logger),\n            cacheEnhancer({ log: true }),            \n            window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n        )\n    );\n\n\nexport default configureStore;","import React from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink } from 'reactstrap';\nimport './index.css'\n\nexport default class TwitchNav extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Navbar dark expand=\"md\">\n          <div className=\"container-fluid\">\n            <NavbarBrand href=\"#\">\n              TWITCHIFY\n            </NavbarBrand>\n            <NavbarToggler onClick={this.toggle} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>              \n                <NavItem>\n                  <NavLink href=\"#\" target=\"_blank\">GitHub</NavLink>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </div>\n        </Navbar>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle\n} from 'reactstrap';\nimport Truncate from 'react-truncate';\n\n\n// custom css\nimport './index.css'\n\nconst TwitchItem = (props) => {\n\n    const getProfessions = props => {\n        const gnomeProfs = props.stream.professions\n        const profLength = gnomeProfs.length;\n        if (profLength === 0) return 'None'\n        return gnomeProfs.map((prof, i) => {\n            return (\n                <span key={i}> {prof}\n                    { profLength !== i + 1 ? ', ' : null}\n                </span>\n            )\n        })\n    }\n\n    return (\n        <a href={props.stream.channel.url} target=\"_blank\" rel=\"noopener noreferrer\">\n            <Card className=\"shadow\">\n                <div className=\"card-img-overlay\">                \n                    <img src={props.stream.channel.logo} width=\"45px\" alt=\"img\"></img>\n                    <span className=\"viewers\">\n                        <strong>{props.stream.viewers} </strong> \n                        viewers\n                    </span>\n                </div>                \n                <CardImg top width=\"100%\" src={props.stream.preview.medium} alt=\"Card image cap\" />\n                <CardBody>\n                    <CardTitle>\n                        <Truncate lines={1} ellipsis={<span>...</span>}>\n                            {props.stream.channel.status}\n                        </Truncate>                        \n                    </CardTitle>\n                    <CardSubtitle className=\"my-1\">\n                        {props.stream.channel.name}\n                    </CardSubtitle>\n                    <CardSubtitle className=\"my-1\">\n                        {props.stream.game}\n                    </CardSubtitle>\n                    <CardText>\n                        {/* Professions: {getProfessions(props)}  */}\n                    </CardText>\n                </CardBody>\n            </Card>\n        </a>\n    );\n};\n\nexport default TwitchItem;","import { createSelector } from \"reselect\";\n\nexport const selectItems = state => state.streamListReducer.allStreams\n\nexport const selectProfessionsFromItems = createSelector(\n    [selectItems],\n    (items) => items.map(item => item.professions)\n)\n\nexport const selectUniqueProfessions = createSelector(\n    [selectProfessionsFromItems],\n    (twoDimensionProfessions) => {\n        const result = [];\n        const map = new Map();\n        for (const professions of twoDimensionProfessions) {\n            for (const profession of professions) {\n                if(!map.has(profession)){\n                    map.set(profession, true);    // set any value to Map\n                    result.push(profession);\n                }\n            }\n        }\n        return result\n    }\n)\n\nconst selectProfessionName = (state, profName) => profName; \nconst selectPropsItems = (props) => props.allStreams\n\nexport const selectGnomesByProfession = createSelector(\n    [selectPropsItems, selectProfessionName],\n    (items, profName) => items.filter(item => item.professions.includes(profName))\n)","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\"\nimport StreamItem from \"../StreamItem\"\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport \"./index.css\"\n// import { hot } from 'react-hot-loader/root'\nimport { selectUniqueProfessions, selectGnomesByProfession } from \"./selectors\"\nimport { fetchAllStreams, fetchfilteredStreams } from '../../redux/StreamListActions';\nimport { Spinner, FormGroup, Input} from 'reactstrap';\n\nclass StreamList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            loadMore: true,\n            streamsToLoad: [],\n            loadedStreams: 0,\n            canLoad: true\n        }\n    }\n    componentDidMount() {        \n        this.loadMoreStreams(0)        \n    }\n\n    loadMoreStreams() {\n        // prevents async api duplicity calls\n        this.setState({\n            loadMore:false\n        })\n        \n        this.props.fetchAllStreams(this.state.loadedStreams).then(() => {\n            console.log('OFSET LOADMORE', this.state.loadedStreams)\n            const nextStreamsToLoad = this.props.allStreams;            \n            this.setState({\n                streamsToLoad: this.state.streamsToLoad.concat(nextStreamsToLoad),\n                loadMore: true,\n                loadedStreams: this.state.loadedStreams + 20,\n                canLoad: true\n            })\n        })        \n    }\n\n    // handleChange(props, e) {\n    //     const gnomesByProfession = selectGnomesByProfession(props, e.target.value)\n    //     this.props.fetchfilteredStreams(gnomesByProfession)\n    //     // reset loaded gnomes invoke loadMoreStreams()        \n    //     this.setState({\n    //         streamsToLoad: []\n    //     })\n    // }\n    \n    render() {\n        if(this.props.allStreams.length > 0) {\n            return (\n                    <div className=\"px-3 mt-5\">                        \n                        <InfiniteScroll\n                            className=\"row\"\n                            pageStart={0}\n                            loadMore={this.loadMoreStreams.bind(this)}\n                            hasMore={this.state.loadMore}\n                            // useWindow={true}\n                            threshold={800}\n                            loader={\n                                <div className=\"loader\" key={0}>\n                                    <Spinner color=\"warning\" key=\"0\" className=\"spinner\"/>                                \n                                </div>}>\n\n                                {this.state.streamsToLoad.map((stream, i) => (\n                                <div className=\"col-12 col-sm-6 col-md-4 col-lg-4 col-xxl-3 mt-4\" key={i}>\n                                    <StreamItem stream={stream}/>\n                                </div>\n                                ))\n                             }\n                        </InfiniteScroll>\n                    </div>\n            )\n        } else {\n            return (\n                <div>\n                    <Spinner color=\"light\" type=\"grow\" style={{\n                        position: \"fixed\",\n                        width:\"4rem\",\n                        height: \"4rem\",\n                        transform: \"translateX(-50%,-50%)\",\n                        top: \"50%\",\n                        left: \"50%\"\n                    }}/>\n                </div>\n            )\n        }\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    fetchAllStreams: (offset) => dispatch(fetchAllStreams(offset)),\n    // fetchfilteredStreams: (streams) => dispatch(fetchfilteredStreams(streams))\n})\n\nconst mapStateToProps = state => {\n    return {\n        allStreams: state.streamListReducer.allStreams,\n        filteredStreams: state.streamListReducer.filteredStreams\n        // jobTypes: selectUniqueProfessions(state)\n    }\n}\n\n\n// export default process.env.NODE_ENV === \"development\"  \n    // ? hot(connect(mapStateToProps, mapDispatchToProps)(StreamList)) \n    // :\n     export default connect(mapStateToProps, mapDispatchToProps)(StreamList);\n\nStreamList.propTypes = {\n    allStreams: PropTypes.arrayOf(\n        PropTypes.shape({\n            // id: PropTypes.number.isRequired,\n            // name: PropTypes.string.isRequired,\n            // thumbnail: PropTypes.string.isRequired,\n            // age: PropTypes.number.isRequired,\n            // weight: PropTypes.number.isRequired,\n            // height: PropTypes.number.isRequired,\n            // hair_color: PropTypes.string.isRequired,\n            // professions: PropTypes.arrayOf(PropTypes.string),\n            // friends: PropTypes.arrayOf(PropTypes.string)\n        })\n    )\n}","import React from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from '../../redux/configureStore';\nimport { BrowserRouter as Router, HashRouter, Route } from \"react-router-dom\"\nimport TwitchNav from \"../TwitchNav/index\"\nimport './App.css';\n\nimport StreamList from \"../StreamList/index\";\n\nconst store = configureStore()\n\nfunction App() {\n  return (\n    <div>\n      <TwitchNav/>\n      <div className=\"container-fluid\">\n        <Provider store={store}>\n          <HashRouter basename=\"/\">\n            <Route exact path=\"/\" component={StreamList} />\n          </HashRouter>\n        </Provider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}